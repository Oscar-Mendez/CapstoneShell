/* Operating systems
 * Capstone Project 1
 * Authors: Oscar Mendez, Cam Lau
 */

 #include<stdio.h>
 #include<string.h>
 #include<unistd.h>
 #include<stdlib.h>
 #include<unistd.h>
 #include<sys/types.h>
 #include<sys/wait.h>
 #include<errno.h>

 #define MAXCMDLIST 256

// Funtion prototypes
void printPrompt();
char* readCommandLine();

char** parseCommand(char* cmdLine);

int isInternalCommand(char** cmd);
int executeInternalCommand(char** cmd);
int executeCommand(char** cmd);

// Prototypes for new functions
void mypwd();
void myecho(char *text);
void mycd(char *path);

char** cmd;
char* cmdParts[3];
pid_t pid;
pid_t pid_child;
int status;

int main (int argc, char **argv){

	// Repeat until exit command is given

	while(1){

		// Prints that shell is ready
		printPrompt();

		// Read until user hits enter
		char* cmdLine = readCommandLine();

		// Command & options in array
		cmd = parseCommand(cmdLine);
        if(isInternalCommand(cmd)){
            executeInternalCommand(cmd);
        }
        else{
            pid=fork();
            if(pid==0)
            {
                executeCommand(cmd);
            }
            else if(pid>0)
            {
                pid_child=wait(&status);   
            }
            else{
                perror("fork failed");
                exit(1);
            }
        } 
	}
}

 // function that prints shell is ready
void printPrompt(){	
	printf("\nOM> ");	
}

// Function that reads the command line
char* readCommandLine(){
	 char* cmdLine = NULL;
	// //might have to change it for realloc
	 size_t len = 0;
	 getline(&cmdLine, &len, stdin);
     if (cmdLine[strlen(cmdLine) - 1] == '\n') {
         cmdLine[strlen(cmdLine) - 1] = '\0';
     }

	 return cmdLine;
}


// Function that twill parse the command.
char** parseCommand(char* cmdLine) {

    char DELIM[]=" ";
	char* token = strtok(cmdLine, DELIM);
    int i=1;
    cmdParts[0]=token;
    if(strcmp(cmdParts[0],"myecho")==0)
    {
        cmdParts[1]=strtok(NULL, "");
        i++; 
    }
    else{
	while (token != NULL) {
	 	token = strtok(NULL, DELIM);
        cmdParts[i] = malloc(MAXCMDLIST * sizeof(char*));
	 	cmdParts[i] = token;
        i++;
    }
    }

	cmdParts[i] = NULL;

	return cmdParts;
}

// Function to get and display current working directory
void mypwd() {
    char cwd[256];
    if (getcwd(cwd, sizeof(cwd)) != NULL) {
        printf("%s\n", cwd);
    } else {
        perror("getcwd() error");
    }
}

void myecho(char *text) {
    char msg[256];
    strcpy(msg, text);
    int len=strlen(msg);
    write(1, msg, len);
}

void mycd(char *path) {
    if (chdir(path) != 0) {
        perror("cd");
    } 
    else{
    printf("%s\n", getcwd(NULL, 0));
}
}

// Function that evalues if command is internal
int isInternalCommand(char** cmd){
    	if (strcmp(cmd[0], "mypwd") == 0 || 
        	strcmp(cmd[0], "myecho") == 0 || 
        	strcmp(cmd[0], "mycd") == 0 || 
        	strcmp(cmd[0], "exit") == 0) {
        	return 1;
    	}
        return 0;
}

// Function that executesInternalCommand
int executeInternalCommand(char** cmd){
    if (strcmp(cmd[0], "mypwd") == 0) {
        mypwd();
    } else if (strcmp(cmd[0], "myecho") == 0) {
        myecho(cmd[1]);
    } else if (strcmp(cmd[0], "mycd") == 0) {
        mycd(cmd[1]);
    } else if (strcmp(cmd[0], "exit") == 0) {
        exit(EXIT_SUCCESS);
    } else {
        printf("%s: command not found p\n", cmd[0]);
        return 1;
    }
    return 0;
}

int executeCommand(char** cmd) {

    execvp(cmd[0], cmd);   

}

//pwd, mkdir, ls -l, id, myecho, mycd, mypwd
